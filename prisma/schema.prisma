// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["clientExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    walletAddress String @id
    seller Seller?

    buyer Buyer?
    informations Information[]
}

model Seller {
    user User @relation(fields: [walletAddress], references: [walletAddress])

    walletAddress String @id
    
    reputation Int @default(0)
    
    transactions Transaction[]
}

model Buyer {
    user User @relation(fields: [walletAddress], references: [walletAddress])

    walletAddress String @id
    
    transactions Transaction[]

    bids Bid[]
}

model Bid {
    id Int @id @default(autoincrement())

    amount Int
    
    transaction Transaction @relation(fields: [informationCID], references: [informationCID])
    informationCID String
    
    buyer Buyer @relation(fields: [buyerAddress], references: [walletAddress])
    buyerAddress String

    createdAt DateTime @default(now())
}

enum TransactionType {
    BID
    ONE_TIME
}

model Transaction {
    informationCID String @id
    information Information @relation(fields: [informationCID], references: [CID])
    
    type TransactionType @default(BID)
    
    sellerAddress String
    seller Seller @relation(fields: [sellerAddress], references: [walletAddress])
    
    buyerAddress String?
    buyer Buyer? @relation(fields: [buyerAddress], references: [walletAddress])
    
    bids Bid[]

    createdAt DateTime @default(now())
    expiresAt DateTime? // when it becomes public and non tradable
    closedAt DateTime? // when it becomes public and non tradable
}

model Information {
    CID String @id
    title String
    description String

    ownerAddress String
    owner User @relation(fields: [ownerAddress], references: [walletAddress])

    Transaction Transaction?

    createdAt DateTime @default(now())
    expiresAt DateTime? // when it becomes public and non tradable
}
