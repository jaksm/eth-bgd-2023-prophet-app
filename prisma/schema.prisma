// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "linux-musl"]
    previewFeatures = ["clientExtensions", "fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    walletAddress String  @id
    seller        Seller?

    buyer        Buyer?
    informations Information[]
}

model Seller {
    user User @relation(fields: [walletAddress], references: [walletAddress])

    walletAddress String @id

    reputation Int @default(0)

    transactions Transaction[]
}

model Buyer {
    user User @relation(fields: [walletAddress], references: [walletAddress])

    walletAddress String @id

    transactions Transaction[]

    bids Bid[]
}

model Bid {
    id String @id @default(cuid())

    amount Int

    transaction    Transaction @relation(fields: [id], references: [id])
    informationCID String

    buyer        Buyer  @relation(fields: [buyerAddress], references: [walletAddress])
    buyerAddress String

    createdAt DateTime @default(now())
}

enum TransactionType {
    BID
    ONE_TIME
}

model Transaction {
    id             String      @id @default(cuid())
    informationCID String
    information    Information @relation(fields: [id], references: [id])

    type TransactionType @default(BID)

    sellerAddress String
    seller        Seller @relation(fields: [sellerAddress], references: [walletAddress])

    buyerAddress String?
    buyer        Buyer?  @relation(fields: [buyerAddress], references: [walletAddress])

    bids Bid[]

    createdAt DateTime  @default(now())
    expiresAt DateTime? // when it becomes public and non tradable
    closedAt  DateTime? // when it becomes public and non tradable
}

model Information {
    id          String  @id
    CID         String?
    title       String
    description String

    ownerAddress String
    owner        User   @relation(fields: [ownerAddress], references: [walletAddress])

    Transaction Transaction?

    createdAt DateTime  @default(now())
    expiresAt DateTime? // when it becomes public and non tradable
}
