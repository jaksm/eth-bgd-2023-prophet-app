import { formatEther } from "@ethersproject/units";
import {
  IconClipboard,
  IconCurrencyEthereum,
  IconPlus,
  IconShieldBolt,
} from "@tabler/icons-react";
import { useEtherBalance, useEthers } from "@usedapp/core";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { Avatar, SIZES } from "../../components/Avatar";
import { Button, ButtonActions } from "../../components/Button";
import { Grid } from "../../components/Grid";
import { AuctionListCard } from "../../components/cards/AuctionListCard";
import { OwnedItemCard } from "../../components/cards/OwnedItemCard";
import { CreateAuctionDialog } from "../../components/dialogs/CreateAuctionDialog";
import { currency } from "../../components/formatter";
import { LayoutSidebar } from "../../components/layouts/LayoutSidebar";
import { api } from "../../utils/api";

const Sell: NextPage = () => {
  const { isLoading, account } = useEthers();
  const etherBalance = useEtherBalance(account);

  const auctions = api.auctions.getAll.useQuery();
  const [createAuctionDialog, setCreateAuctionDialog] = useState(false);

  return (
    <>
      <Head>
        <title>Prophet | Buy</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LayoutSidebar>
        <main className="flex min-h-screen w-full flex-col justify-center">
          <CreateAuctionDialog
            isOpen={createAuctionDialog}
            onChange={setCreateAuctionDialog}
          />

          <div className="container mx-auto flex flex-col gap-12 px-4">
            <div className="grid grid-cols-3 gap-12">
              {!isLoading && (
                <section className="col-span-2 flex items-start gap-4 py-8">
                  <Avatar size="large" seed={account || ""} />
                  <div className="flex flex-col gap-4">
                    <div className="flex flex-col justify-center gap-2">
                      <span className="text-white/60">Current balance</span>

                      <div className="flex items-center gap-2">
                        <IconCurrencyEthereum
                          size="36px"
                          className="text-white"
                        />
                        <h1 className="text-4xl font-bold text-white">
                          {formatEther(etherBalance || 0)} ETH
                        </h1>
                      </div>
                    </div>

                    <Button
                      variant="text"
                      className="bg-black"
                      icon={<IconClipboard />}
                      reverse
                      onClick={() => ButtonActions.copy(account || "")}
                    >
                      Account {account?.slice(0, 8)}...
                    </Button>
                  </div>
                </section>
              )}

              <section className="flex items-start gap-4 py-8">
                <IconShieldBolt
                  size={SIZES.large + 16}
                  className="rounded-full border border-white/10 p-2 text-white"
                />
                <div className="flex flex-col gap-4">
                  <div className="flex flex-col justify-center gap-2">
                    <span className="text-white/60">Current Rating</span>

                    <div className="flex items-baseline gap-2">
                      <h1 className="text-4xl font-bold text-white">
                        {currency.format(4.1, 1)}
                      </h1>

                      <span className="text-white/50">(200) reviews</span>
                    </div>
                  </div>
                </div>
              </section>
            </div>

            <section
              id="owned"
              className="flex w-full items-center justify-between gap-4 py-6"
            >
              <h1 className="text-3xl font-bold text-white">ðŸ’Ž Owned Items</h1>
            </section>

            <Grid
              items={auctions.data || []}
              renderItem={(auction, i) => (
                <OwnedItemCard
                  key={i}
                  title={auction.information.title}
                  description={auction.information.description}
                  informationCID={auction.informationCID}
                  sellerAddress={auction.information.ownerAddress}
                />
              )}
            />

            <div className="h-12" />

            <section
              id="for-sale"
              className="flex w-full items-center justify-between gap-4 py-6"
            >
              <h1 className="text-3xl font-bold text-white">
                ðŸ’° Items for Sale
              </h1>
              <button
                className="rounded-3xl bg-purple-800 p-4  px-4 py-3"
                onClick={() => setCreateAuctionDialog(true)}
              >
                <IconPlus size="1.5em" className="text-white" />
              </button>
            </section>

            <section className="flex flex-col gap-6">
              {(auctions.data || []).map((auction, i) => (
                <div key={i}>
                  <AuctionListCard
                    title={auction.information.title}
                    informationCID={auction.informationCID}
                    description={auction.information.description}
                    highestBid={0}
                  />
                </div>
              ))}
            </section>
          </div>
        </main>
      </LayoutSidebar>
    </>
  );
};

export default Sell;
